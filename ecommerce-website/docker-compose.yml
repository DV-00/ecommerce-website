services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always
    networks:
      - ecommerce-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    restart: always
    networks:
      - ecommerce-net

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--protected-mode", "no"]
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - ecommerce-net
    healthcheck: # ADD THIS SECTION
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  mysql:
    image: mysql:latest
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_DB_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks:
      - ecommerce-net

  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: userservice
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/userservice_db
      SPRING_DATASOURCE_USERNAME: ${MYSQL_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - mysql
    restart: always
    init: true
    networks:
      - ecommerce-net

  productservice:
    build:
      context: ./productservice
      dockerfile: Dockerfile
    container_name: productservice
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/productservice_db
      SPRING_DATASOURCE_USERNAME: ${MYSQL_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      mysql:
        condition: service_started
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      userservice:
        condition: service_started
    restart: always
    init: true
    networks:
      - ecommerce-net

  paymentservice:
    build:
      context: ./paymentservice
      dockerfile: Dockerfile
    container_name: paymentservice
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/paymentservice_db
      SPRING_DATASOURCE_USERNAME: ${MYSQL_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ORDERSERVICE_BASE_URL: http://orderservice:8083
      KAFKA_TOPIC_PAYMENT_STATUS: payment-events
    depends_on:
      - mysql
      - kafka
      - orderservice
    restart: always
    init: true
    networks:
      - ecommerce-net

  orderservice:
    build:
      context: ./orderservice
      dockerfile: Dockerfile
    container_name: orderservice
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/orderservice_db
      SPRING_DATASOURCE_USERNAME: ${MYSQL_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      USERSERVICE_BASE_URL: http://userservice:8080
      PRODUCTSERVICE_BASE_URL: http://productservice:8081
      PAYMENTSERVICE_BASE_URL: http://paymentservice:8082
      CARTSERVICE_BASE_URL: http://cartservice:8084
      NOTIFICATIONSERVICE_BASE_URL: http://notificationservice:8085
      KAFKA_TOPIC_PAYMENT_STATUS: payment-events
      KAFKA_TOPIC_ORDER_EVENTS: order-events
      KAFKA_TOPIC_CART_EVENTS: cart-events
    depends_on:
      - mysql
      - kafka
      - userservice
      - productservice
      - cartservice
    restart: always
    init: true
    networks:
      - ecommerce-net

  cartservice:
    build:
      context: ./cartservice
      dockerfile: Dockerfile
    container_name: cartservice
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/cartservice_db
      SPRING_DATASOURCE_USERNAME: ${MYSQL_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCTSERVICE_BASE_URL: http://productservice:8081
    depends_on:
      - mysql
      - kafka
      - productservice
    restart: always
    init: true
    networks:
      - ecommerce-net

  notificationservice:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    container_name: notificationservice
    ports:
      - "8085:8085"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - kafka
      - orderservice
      - paymentservice
    restart: always
    init: true
    networks:
      - ecommerce-net

volumes:
  redis-data:
  mysql-data:

networks:
  ecommerce-net:
    driver: bridge